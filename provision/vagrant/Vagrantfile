Vagrant.configure("2") do |config|


  unless Vagrant.has_plugin?("vagrant-hostmanager")
    raise "vagrant-hostmanager plugin has not been installed"
  end

  unless Vagrant.has_plugin?("trigger")
    raise "trigger plugin has not been installed"
  end

#https://github.com/emyl/vagrant-triggers
  if Vagrant.has_plugin?("vagrant-trigger")

    config.trigger.after :up do
          #Force apt to use existing file
          #http://askubuntu.com/questions/104899/make-apt-get-or-aptitude-run-with-y-but-not-prompt-for-replacement-of-configu
          config.vm.provision "file" do |f|
                f.source = 'config/apt'
                f.destination = '/etc/apt/apt.conf.d/90local'
          end
    end
  end

  if Vagrant.has_plugin?("vagrant-puppet-install")
    raise "vagrant-puppet-install must not be installed"
  end

  # Ubuntu 14.04 LTS x64 official cloud image
  config.vm.box = "ubuntu/xenial64"

  config.hostmanager.enabled = true
  config.hostmanager.include_offline = true

  master_json_config = JSON.parse(IO.read("../packer/xenial-master.json"))
  master_provisioners = master_json_config["provisioners"]
  master_puppet_config = "hello"

  worker_json_config = JSON.parse(IO.read("../packer/xenial-master.json"))
  worker_provisioners = master_json_config["provisioners"]
  worker_puppet_config = "hello"

  master_provisioners.each { |pv|
    if pv["type"] == "puppet-masterless"
        master_puppet_config = pv
        master_puppet_config["manifest_file"] = 'site.pp'
        master_puppet_config["manifest_dir"] = '../puppetlabs/code/environments/production/manifests/'
    end
#    if pv["type"] == "file"
#            config.vm.provision "file" do |f|
#                f.source = pv["source"]
#                f.destination = pv["destination"]
#            end
#    end
    if pv["type"] == "shell" and pv["setup"] == "vagrant"
          pv["inline"].each { |line|
            config.vm.provision "shell" do |s|
              s.privileged = false
              s.inline = 'sudo -E -S /bin/bash -c "' + line + '"'
            end
          }
    end
  }

  worker_provisioners.each { |pv|
    if pv["type"] == "puppet-masterless"
        worker_puppet_config = pv
        worker_puppet_config["manifest_file"] = 'site.pp'
        worker_puppet_config["manifest_dir"] = '../puppetlabs/code/environments/production/manifests/'
    end
  }


# Vagrant's "change host name" sets the short host name.
# Before we undo the /etc/hosts silliness (see below) let's
# reset /etc/hostname to the *full* host name
#
config.vm.provision "shell",
  inline: "hostname --fqdn > /etc/hostname && hostname -F /etc/hostname"

    # Vagrant's "change host name" capability for Fedora
    # maps hostname to loopback, conflicting with hostmanager.
    # We must repair /etc/hosts
    #
    config.vm.provision "shell" do |s|
      s.privileged = false
      s.inline = "sudo sed -ri 's/127\.0\.0\.1\s.*/127.0.0.1 localhost localhost.localdomain/' /etc/hosts"
    end

  # VirtualBox, common settings
  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512
    vb.cpus = 1
#    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"] # fixes slow dns lookups

  end

  config.vm.synced_folder "../..", "/vagrant", mount_options: ['dmode=777,fmode=777']
  #Note that the apt config defined above is necessary otherwise there will be conflict when
  #attempting to install puppet
  config.vm.synced_folder "../puppetlabs/code", "/etc/puppetlabs/code", mount_options: ['dmode=777,fmode=777']

  config.vm.define "master" do |srv|
     srv.vm.hostname = "master"
     srv.vm.network :private_network, ip: "192.168.9.10"
     srv.vm.provider "virtualbox" do |vb| vb.name = "SGE-Master"; end
     srv.vm.provision :puppet do |puppet|
          puppet.environment_path = "../puppetlabs/code/environments"
          puppet.facter = {
            "role" => "cluster_master"
          }
         # puppet.manifest_file  = master_puppet_config["manifest_file"]
         # puppet.manifests_path = master_puppet_config["manifest_dir"]
      #     puppet.environment = puppet_config["puppet_environment"]
      #    puppet.options = "--verbose --debug --environment=local"
          puppet.options = "--verbose --debug"
      end
    config.vm.provision "shell" do |s|
      s.privileged = false
      s.inline = "sudo -E -S /bin/bash -c 'mkdir -p /opt/puppetlabs/facter/facts.d/ &&
                                              chgrp ubuntu /opt/puppetlabs/facter/facts.d/ && 
                                              chmod g+w /opt/puppetlabs/facter/facts.d/ '"
    end
    srv.vm.provision "file", source: "config/role_master.yaml", destination: "/opt/puppetlabs/facter/facts.d/role.yaml"
  end

  config.vm.define "worker1" do |srv|
    srv.vm.hostname = "worker1"
    srv.vm.network :private_network, ip: "192.168.9.11"
    srv.vm.provider "virtualbox" do |vb| 

		vb.name = "SGE-Worker1";

   # Note that this may not be the correct file name
        defaultdisk = "#{ENV["HOME"]}/VirtualBox VMs/#{vb.name}/ubuntu-xenial-16.04-cloudimg.vmdk"
		#Create a larger root disk
		vbdisk = "#{ENV["HOME"]}/VirtualBox VMs/#{vb.name}/ubuntu.vdi"

		if ARGV[0] == "up" && ! File.exist?(vbdisk)
			vb.customize [ "clonehd", defaultdisk, vbdisk, "--format", "VDI" ]
			vb.customize [ "modifyhd", vbdisk, "--resize", 20 * 1024 ]
			vb.customize [
			  "storageattach", :id, 
			  "--storagectl", "SCSI Controller",
			  "--port", "0", 
			  "--device", "0", 
			  "--type", "hdd",
			  "--nonrotational", "on",
			  "--medium", vbdisk,
			]
            #Tidy up the one we're not using
            vb.customize "post-boot", [ "closemedium", "disk", defaultdisk, "--delete" ]
		end
    end
    srv.vm.provision "puppet" do |puppet|
          puppet.environment_path = "../puppetlabs/code/environments"
          puppet.facter = {
            "role" => "cluster_worker"
          }
      #    puppet.options = "--verbose --debug --environment=local"
          puppet.options = "--verbose --debug"
    end
    config.vm.provision "shell" do |s|
      s.privileged = false
      s.inline = "sudo -E -S /bin/bash -c 'mkdir -p /opt/puppetlabs/facter/facts.d/ &&
                                              chgrp ubuntu /opt/puppetlabs/facter/facts.d/ && 
                                              chmod g+w /opt/puppetlabs/facter/facts.d/ '"
    end
    srv.vm.provision "file", source: "config/role_worker.yaml", destination: "/opt/puppetlabs/facter/facts.d/role.yaml"
  end

  config.vm.define "worker2" do |srv|
    srv.vm.hostname = "worker2"
    srv.vm.network :private_network, ip: "192.168.9.12"
    srv.vm.provider "virtualbox" do |vb| 
		vb.name = "SGE-Worker2";

        defaultdisk = "#{ENV["HOME"]}/VirtualBox VMs/#{vb.name}/ubuntu-xenial-16.04-cloudimg.vmdk"
		#Create a larger root disk
		vbdisk = "#{ENV["HOME"]}/VirtualBox VMs/#{vb.name}/ubuntu.vdi"
		if ARGV[0] == "up" && ! File.exist?(vbdisk)
			vb.customize [ "clonehd", defaultdisk, vbdisk, "--format", "VDI" ]
			vb.customize [ "modifyhd", vbdisk, "--resize", 20 * 1024 ]
			vb.customize [
			  "storageattach", :id, 
			  "--storagectl", "SCSI Controller",
			  "--port", "0", 
			  "--device", "0", 
			  "--type", "hdd",
			  "--nonrotational", "on",
			  "--medium", vbdisk,
			]
            #Tidy up the one we're not using
            vb.customize "post-boot", [ "closemedium", "disk", defaultdisk, "--delete" ]
		end
	end
    srv.vm.provision "puppet" do |puppet|
          puppet.environment_path = "../puppetlabs/code/environments"
          puppet.facter = {
            "role" => "cluster_worker"
          }
      #    puppet.options = "--verbose --debug --environment=local"
          puppet.options = "--verbose --debug"
    end
    config.vm.provision "shell" do |s|
      s.privileged = false
      s.inline = "sudo -E -S /bin/bash -c 'mkdir -p /opt/puppetlabs/facter/facts.d/ &&
                                              chgrp ubuntu /opt/puppetlabs/facter/facts.d/ && 
                                              chmod g+w /opt/puppetlabs/facter/facts.d/ '"
    end
    srv.vm.provision "file", source: "config/role_worker.yaml", destination: "/opt/puppetlabs/facter/facts.d/role.yaml"
  end


end
